### Objectives
The objective of this project is to learn the GraphQL query language by creating your own profile page.

You'll use the GraphQL endpoint provided by the platform (https://01.kood.tech/api/graphql-engine/v1/graphql). You'll be able to query your own data to populate your profile page.

So that you can access your data, you'll need to create a login page.

### Your Profile Page
Your profile must display three pieces of information which you may choose. For example:

- Basic user identification
- XP amount
- Grades
- Audits
- Skills

Besides those sections, it will have a mandatory section for the generation of statistic graphs.

### Instructions
You will have to create a profile UI where you can see your own school information. This information/data is present on the GraphQL endpoint, where you will have to query it.

The UI design is up to you. However, it must have a statistic section where you can generate graphs to see more about your journey and achievements at the school. These graphs must be done using SVG. You need to do at least two different statistic graphs for the data given. Bear in mind the principles of a good UI.

Using SVG, you can create several types of graphs including interactive graphs and animated graphs. It will be up to you to decide what type of graphs you are going to do.

#### Possible Combinations for Graphs
- XP earned in a time period (progress over time)
- XP earned by project
- Audit ratio
- Projects PASS and FAIL ratio
- Piscine (JS/Go) stats
- PASS and FAIL ratio
- Attempts for each exercise
- Any other information you desire to display is welcome and will be noted.

### Login Page
You'll need a JWT to access the GraphQL API. A JWT can be obtained from the signin endpoint (https://01.kood.tech/api/auth/signin).

You may make a POST request to the signin endpoint, and supply your credentials using Basic authentication, with base64 encoding.

Your login page must function with both:

- `username:password`
- `email:password`

If the credentials are invalid, an appropriate error message must be displayed.

You must provide a method to log out.

When making GraphQL queries, you'll supply the JWT using Bearer authentication. It will only allow access to the data belonging to the authenticated user.

You may inspect the JWT to discover the ID of the authenticated user.

### Hosting
Besides the creation of your own profile, you will have to host it. There are several places where you can host your profile, for example: GitHub Pages, Netlify, and so on. You are free to choose the hosting place.

### GraphQL Tables and Columns
Here is a selection of interesting tables and columns exposed via GraphQL:

#### `user` table:
This table will have information about the user.

| id  | login    |
|-----|----------|
| 1   | person1  |

#### `transaction` table:
This table will give you access to XP and through the `user` table you can get to the audits ratio as well.

| id  | type | amount | objectId | userId | createdAt                | path                          |
|-----|------|--------|----------|--------|--------------------------|-------------------------------|
| 1   | xp   | 234    | 42       | 1      | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |
| 2   | xp   | 1700   | 2        | 1      | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |
| 3   | xp   | 175    | 64       | 1      | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |

#### `progress` table:

| id  | userId | objectId | grade | createdAt                | updatedAt                | path                          |
|-----|--------|----------|-------|--------------------------|--------------------------|-------------------------------|
| 1   | 1      | 3001     | 1     | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/piscine-go/quest-01  |
| 2   | 1      | 198      | 0     | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/piscine-go/quest-01  |
| 3   | 1      | 177      | 1     | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/piscine-go/quest-01  |

#### `result` table:
Both `progress` and `result` tables will give you the student progression.

| id  | objectId | userId | grade | type | createdAt                | updatedAt                | path                          |
|-----|----------|--------|-------|------|--------------------------|--------------------------|-------------------------------|
| 1   | 3        | 1      | 0     |      | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |
| 2   | 23       | 1      | 0     |      | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |
| 3   | 41       | 1      | 1     |      | 2021-07-26T13:04:02.301 | 2021-07-26T13:04:02.301 | /madere/div-01/graphql       |

#### `object` table:
This table will give you information about all objects (exercises/projects).

| id  | name | type     | attrs |
|-----|------|----------|-------|
| 1   | 0    | exercise | {}    |
| 2   | 0    | project  | {}    |
| 3   | 1    | exercise | {}    |

### Query Examples

#### Example 1: Simple Query
Query the `user` table:
```graphql
{
  user {
    id
  }
}
```
This will return an array with the ID of the authenticated user. If you want the login, add the attribute to the query:
```graphql
{
  user {
    id
    login
  }
}
```

#### Example 2: Using Variables (Arguments)
Query the `object` table with a filter:
```graphql
{
  object(where: { id: { _eq: 3323 }}) {
    name
    type
  }
}
```
This will return just one object with the `id` equal to `3323`.

#### Example 3: Nested Query
Nest queries using the `result` and `user` tables:
```graphql
{
  result {
    id
    user {
      id
      login
    }
  }
}
```
This will return the `result` ID and the associated user login and ID.

### Learnings
This project will help you learn about:
- GraphQL
- GraphiQL
- Hosting
- JWT
- Authentication
- Authorization
- Basics of human-computer interface
- UI/UX

